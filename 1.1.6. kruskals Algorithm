#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define INF 9999
int find(int parent[], int i) {
	if (parent[i] != i)
		parent[i] = find(parent, parent[i]);
	return parent[i];
}
void union1(int parent[], int rank[], int i, int j) {
	int iroot = find(parent, i);
	int jroot = find(parent, j);

	if (rank[iroot] < rank[jroot])
		parent[iroot] = jroot;
	else if (rank[iroot] > rank[jroot])
		parent[jroot] = iroot;
	else {
		parent[jroot] = iroot;
		rank[iroot]++;
	}
}
struct Edge {
	int src, dest, weight;
};
int compareEdges(const void *a, const void *b) {
	struct Edge *e1 = (struct Edge *)a;
	struct Edge *e2 = (struct Edge *)b;
	if (e1->weight != e2->weight)
		return e1->weight - e2->weight;
	if (e1->src != e2->src)
		return e1->src - e2->src;
	return e1->dest - e2->dest;
}
void kruskalMST(int **cost, int V) {
	struct Edge *edges = malloc(V * V * sizeof(struct Edge));
	int edgeCount = 0;
	for (int i = 0; i < V; i++) {
		for (int j = i + 1; j < V; j++) {
		    if (cost[i][j] != INF) {
				edges[edgeCount].src = i;
				edges[edgeCount].dest = j;
				edges[edgeCount].weight = cost[i][j];
				edgeCount++;
			}
		}
	}
	qsort(edges, edgeCount, sizeof(struct Edge), compareEdges);
	int *parent = malloc(V * sizeof(int));
	int *rank = malloc(V * sizeof(int));
	for (int i = 0; i < V; i++) {
		parent[i] = i;
		rank[i] = 0;
	}
	int totalCost = 0;
	int edgesIncluded = 0;
	for (int i = 0; i < edgeCount && edgesIncluded < V - 1; i++) {
		int u = edges[i].src;
		int v = edges[i].dest;
		int set_u = find(parent, u);
		int set_v = find(parent, v);
		if (set_u != set_v) {
			printf("Edge %d:(%d, %d) cost:%d\n", edgesIncluded, u, v, edges[i].weight);
			totalCost += edges[i].weight;
			union1(parent, rank, set_u, set_v);
			edgesIncluded++;
		}
	}
	printf("Minimum cost= %d\n", totalCost);
	free(parent);
	free(rank);
	free(edges);
}
int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
